import{_ as e,o as a,c,b as d}from"./app-10e63fa5.js";const t={},o=d('<h1 id="你能解释一下vue中的计算属性-computed-和侦听器-watcher-的区别吗" tabindex="-1"><a class="header-anchor" href="#你能解释一下vue中的计算属性-computed-和侦听器-watcher-的区别吗" aria-hidden="true">#</a> 你能解释一下Vue中的计算属性（computed）和侦听器（watcher）的区别吗？</h1><h3 id="计算属性" tabindex="-1"><a class="header-anchor" href="#计算属性" aria-hidden="true">#</a> 计算属性：</h3><ol><li><p>计算属性主要用在模板渲染中，某个值是依赖于其它的响应式数据动态获得的，它会有缓存，只有它依赖的数据发生改变，下一次读取计算属性时才会重新计算计算属性的值。</p></li><li><p>如果计算属性是基于其它计算属性获取的，那么它会等依赖的计算属性值更新后再更新。</p></li><li><p>计算属性不仅可以用于计算，也可以提供 setter 函数，当你尝试修改计算属性的值时，就会调用这个 setter 函数。</p></li></ol><h3 id="侦听器" tabindex="-1"><a class="header-anchor" href="#侦听器" aria-hidden="true">#</a> 侦听器：</h3><ol><li><p><code>watch</code> 用于观察 Vue 实例上的数据变动。对于数据变动需要执行异步或开销较大的操作时，最好使用 <code>watch</code>。</p></li><li><p><code>watch</code> 还提供了 <code>immediate</code> 和 <code>deep</code> 配置。<code>immediate</code> 会在页面加载时立即执行一次回调，<code>deep</code> 则提供了深度监听，可以监听到对象内部值的变化。</p></li></ol><h3 id="可以这样回答" tabindex="-1"><a class="header-anchor" href="#可以这样回答" aria-hidden="true">#</a> 可以这样回答：<br></h3><p>计算属性是基于它们的依赖进行缓存的，只有当它们的依赖发生改变时才会重新求值，因此它们非常适合用于任何复杂的逻辑，尤其是当你需要将此逻辑用在模板中时。<br> 另一方面，侦听器更多地是用来响应数据的变化并执行异步操作或较大开销的操作。侦听器也提供了一些额外的特性如深度观察和立即执行。</p>',7),r=[o];function i(h,l){return a(),c("div",null,r)}const s=e(t,[["render",i],["__file","computed-wather.html.vue"]]);export{s as default};
