import{_ as e,o as t,c as i,b as o}from"./app-10e63fa5.js";const l={},r=o('<h1 id="你能解释一下-vue-的生命周期钩子函数吗-并且描述一下每个钩子函数的作用" tabindex="-1"><a class="header-anchor" href="#你能解释一下-vue-的生命周期钩子函数吗-并且描述一下每个钩子函数的作用" aria-hidden="true">#</a> 你能解释一下 Vue 的生命周期钩子函数吗？并且描述一下每个钩子函数的作用？</h1><h3 id="在-vue-中-一个组件的生命周期大致可以分为四个阶段-创建阶段、挂载阶段、更新阶段、卸载阶段。这四个阶段对应了多个生命周期钩子函数" tabindex="-1"><a class="header-anchor" href="#在-vue-中-一个组件的生命周期大致可以分为四个阶段-创建阶段、挂载阶段、更新阶段、卸载阶段。这四个阶段对应了多个生命周期钩子函数" aria-hidden="true">#</a> 在 Vue 中，一个组件的生命周期大致可以分为四个阶段：创建阶段、挂载阶段、更新阶段、卸载阶段。这四个阶段对应了多个生命周期钩子函数：</h3><ol><li><p>beforeCreate: 这是在实例被创建后，数据观测和事件配置之前被调用。</p></li><li><p>created: 实例已经创建完成，属性已经绑定，但是 DOM 还未生成，$el 属性目前不可见。</p></li><li><p>beforeMount: 在挂载开始之前被调用，相关的 render 函数首次被调用。</p></li><li><p>mounted: 实例已经挂载到 DOM 上，这时候你就可以通过 DOM API 获取到 DOM 节点。</p></li><li><p>beforeUpdate: 数据更新时调用，发生在虚拟 DOM 打补丁之前。</p></li><li><p>updated: 由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用。</p></li><li><p>beforeDestroy: 实例销毁之前调用。在这一步，实例仍然完全可用。</p></li><li><p>destroyed: Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑，所有的事件监听器都会被移除，所有的子实例也都会被销毁。</p></li></ol><h3 id="这些都是-vue-2-x-的生命周期钩子-但在-vue-3-x-中-由于引入了-composition-api-生命周期钩子有了新的命名方式" tabindex="-1"><a class="header-anchor" href="#这些都是-vue-2-x-的生命周期钩子-但在-vue-3-x-中-由于引入了-composition-api-生命周期钩子有了新的命名方式" aria-hidden="true">#</a> 这些都是 Vue 2.x 的生命周期钩子，但在 Vue 3.x 中，由于引入了 Composition API，生命周期钩子有了新的命名方式：</h3><ul><li>beforeCreate -&gt; 使用 setup()</li><li>created -&gt; 使用 setup()</li><li>beforeMount -&gt; onBeforeMount</li><li>mounted -&gt; onMounted</li><li>beforeUpdate -&gt; onBeforeUpdate</li><li>updated -&gt; onUpdated</li><li>beforeUnmount (原 beforeDestroy) -&gt; onBeforeUnmount</li><li>unmounted (原 destroyed) -&gt; onUnmounted</li></ul>',5),a=[r];function n(d,u){return t(),i("div",null,a)}const c=e(l,[["render",n],["__file","life-cycle.html.vue"]]);export{c as default};
