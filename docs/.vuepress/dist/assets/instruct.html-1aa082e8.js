import{_ as e,o,c,b as d}from"./app-10e63fa5.js";const i={},t=d('<h1 id="你了解-vue-js-的指令吗-能否列举一些常见的-vue-js-指令-并解释它们的作用" tabindex="-1"><a class="header-anchor" href="#你了解-vue-js-的指令吗-能否列举一些常见的-vue-js-指令-并解释它们的作用" aria-hidden="true">#</a> 你了解 Vue.js 的指令吗？能否列举一些常见的 Vue.js 指令，并解释它们的作用？</h1><h3 id="vue-js-提供了多种内置指令来应用动态行为到-dom-元素" tabindex="-1"><a class="header-anchor" href="#vue-js-提供了多种内置指令来应用动态行为到-dom-元素" aria-hidden="true">#</a> Vue.js 提供了多种内置指令来应用动态行为到 DOM 元素：</h3><ol><li><p><code>v-bind</code>：动态地绑定一个或多个特性，或一个组件 prop 到表达式。</p></li><li><p><code>v-model</code>：在表单 <code>&lt;input&gt;</code>、<code>&lt;textarea&gt;</code> 及 <code>&lt;select&gt;</code> 元素上创建双向数据绑定。</p></li><li><p><code>v-if</code>：根据表达式的值的真假条件渲染元素。这个指令会在 <code>true</code> 和 <code>false</code> 之间切换创建或销毁元素。</p></li><li><p><code>v-else</code>：表示 <code>v-if</code> 的“else 块”，必须紧跟在 <code>v-if</code> 或 <code>v-else-if</code> 元素的后面。</p></li><li><p><code>v-else-if</code>：表示 <code>v-if</code> 的“else if 块”，必须紧跟在 <code>v-if</code> 或 <code>v-else-if</code> 元素的后面。</p></li><li><p><code>v-for</code>：基于源数据多次渲染元素或模板块。</p></li><li><p><code>v-on</code>：绑定事件监听器。事件类型由参数指定。表达式可以是方法的名字或内联语句。</p></li><li><p><code>v-show</code>：根据表达式之真假值，切换元素的 CSS 属性 <code>display</code>。</p></li><li><p><code>v-text</code>：更新元素的 <code>textContent</code>。如果要更新部分的 <code>textContent</code>，需要使用 <code>{{ Mustache }}</code> 插值。</p></li><li><p><code>v-html</code>：更新元素的 <code>innerHTML</code>。注意：内容按普通 HTML 插入 - 数据绑定被忽略。只用作可信内容上，不用在用户内容上，防止 XSS 攻击。</p></li><li><p><code>v-pre</code>：跳过这个元素和它的子元素的编译过程。可以用来显示原始的 Mustache 标签。</p></li><li><p><code>v-once</code>：只渲染元素和组件一次。随后的重新渲染操作将会被跳过。</p></li></ol>',3),l=[t];function s(a,p){return o(),c("div",null,l)}const r=e(i,[["render",s],["__file","instruct.html.vue"]]);export{r as default};
